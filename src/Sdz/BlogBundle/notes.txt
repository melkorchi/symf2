********************
*** ORM DOCTRINE ***
********************

ORM: Object Relational Mapping

Ligne de commande php app/console 
    doctrine:database:create
    doctrine:query:dql
    doctrine:query:sql
    doctrine:schema:update --dump -sql
    doctrine:schema:update --force

Service Doctrine
    $doctrine = $this->get('doctrine') ou $this->getDoctrine()
Service Manager
    $entityManager = $em = $doctrine->getManager()=$this->getDoctrine()->getManager();
Service Repository
    $repository = $this->getDoctrine()->getManager()->getRepository('SdzBlogBundle:Article')

$em->persist($article)
$em->flush()

$em->clear() Annule la persistance
$em->detach($article) Exclut la persistance de $article

Mehtode prédéfinies:
    find
    findAll
    Méthodes magiques
        findByX
        findOneByX

Les événements doctrine, annotation  @ORM\HasLifecycleCallbacks() 
Notion de cycle de vie d'une entité, création, chargement depuis la base, modification, suppression... possibilité de réaliser des actions juste avant ou àprès...



**********************
*** Requête en DQL ***
********************** 

DQL: Docrine Query Language

1) Select Simple
  Contexte: table Article
    Dans le repository Article
    function myfindAll
        return $qb = $this->createQueryBuilder('a')->getQuery()-getResult();

2) Requête avec paramètres
  Contexte: table Article
    Dans le repository Article
    function findByAuthorAndDate($author, $year)
        $qb = $this->createQueryBuilder('a')
            ->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :year)
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')

        return $qb->getQuery()->getResult();

3) Les jointures
  Contexte: 3 tables Article, Catégorie et Image

    Dans le repository Article
    function getArticles
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            ->leftJoin('a.categorie', 'c')
            ->addSelect('c')
            ->orderBy('a.date', 'DESC')

        return $qb->getQuery()->getResult();

4) Construire sa Requête dynamiquement
  Contexte: table Article, Repository Article

    function myFind()
        $qb = $this->createQueryBuilder('a')
            ->where('a.author = :author')
            ->setParameter('author', 'khrisnamurti');

        // On applique notre condition (fonction extérieure)
        $qb = $this->whereCurrentYear($qb);

        $qb->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();

    function whereCurrentYear(\Doctrine\ORM\QueryBuider $qb)
        $qb->andWhere('a.date BETWEEN :deb ANd :fin')
            ->setParameter('deb', new \Datetime(date('Y').'-01-01'))
            ->setParameter('fin', new \Datetime(date('Y').'-12-31'))

        return $qb;

ACID => Acidité cohérence isolation et durabilité
Jointure => Inner et left Join (Right et Full)
Présentation en anglais (le projet)
Indexation
Test de base de données
Tests Unitaires et fonctionnels

************
*** Twig ***
************

Twig et la sécurité, il applique par défaut un filtre sur les variales que l'on affiche afin de les protéger contre les balises HTML malencontreuses. Ces variables sont échappées. Par exemple si le caractère < est présent, il est remplacé par &lt;
Si on veut volontairement afficher une variable contenant du HTML (ou Javascript), il faut utiliser le filtre raw telque {{ variable|raw }}

Variables globales accessibles dans les templates:
    - {{ app.request }}
    - app.session
    - app.environment
    - app.debug
    - app.security
    - app.user

Nos propres variables globales
    -> dans app/config/config.yml
    #...
    twig:
        globals:
            webmaster: mekIbnMek

    la variable {{ webmaster }} sera injectée dans les vues 

    Mais le bonne pratique est:
    -> dans app/config/config.yml
    #...
    twig:
        globals:
            webmaster: %app_webmaster%
    -> et dans app/config/parameters.yml
    parameters:
        #...
        app_webmaster: mekIbnMek

Itérations
    {{ loop.index }} numéro d'itération courante
    {{ loop.first }} true si c la 1ere itération
    {{ loop.last }} true si c la dernière itération
    {{ loop.revindex }} nb d'itérations restantes avant de la fin de la boucle (finissant par 1)
    {{ loop.length }} nb total d'itérations dans la boucle

****************************************
*** Hériter et inclure des templates ***
****************************************

Le modèle du triple héritage
    - layout général (app/Resources/views/layout.hml.twig)
        C'est le design et la structure du site, indépendamment des bundles. Il contient le header, le footer etc... Il s'agira du template père.
    - layout du bundle
        Il hérite du layout général et contient les parties communes à toutes les pages d'un même bundle. Typiquement un menu pour notre blog par exemple.
    - template de page
        Il hérite du layout du bundle et contient les éléments centraux de la page.

Inclusion de templates
  {% include "SdzBlogBundle:Blog:formulaire.html.twig" %}
  Ex: les formulaires de création et d'édition d'un article ont une partie commune -> inclusion...

Inclusion de contrôleurs
  {% render "SdzBlogBundle:Blog:menu" %}

